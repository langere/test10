{"ast":null,"code":"import React,{useState}from'react';import'./styles.css';// 确保引入样式文件\n// 定义棋盘大小\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const BOARD_SIZE=15;// 判断胜负的函数\nconst checkWin=(board,rowIndex,cellIndex,player)=>{// 检查横向\nlet count=0;for(let j=cellIndex-4;j<=cellIndex+4;j++){if(j>=0&&j<BOARD_SIZE&&board[rowIndex][j]===player){count++;if(count===5){return true;}}else{count=0;}}// 检查纵向\ncount=0;for(let i=rowIndex-4;i<=rowIndex+4;i++){if(i>=0&&i<BOARD_SIZE&&board[i][cellIndex]===player){count++;if(count===5){return true;}}else{count=0;}}// 检查正斜向\ncount=0;for(let k=-4;k<=4;k++){let i=rowIndex+k;let j=cellIndex+k;if(i>=0&&i<BOARD_SIZE&&j>=0&&j<BOARD_SIZE&&board[i][j]===player){count++;if(count===5){return true;}}else{count=0;}}// 检查反斜向\ncount=0;for(let k=-4;k<=4;k++){let i=rowIndex+k;let j=cellIndex-k;if(i>=0&&i<BOARD_SIZE&&j>=0&&j<BOARD_SIZE&&board[i][j]===player){count++;if(count===5){return true;}}else{count=0;}}return false;};const Board=()=>{// 棋盘状态，使用二维数组表示，0表示无棋子，1表示黑棋，2表示白棋\nconst[board,setBoard]=useState(()=>{const initialBoard=[];for(let i=0;i<BOARD_SIZE;i++){initialBoard[i]=[];for(let j=0;j<BOARD_SIZE;j++){initialBoard[i][j]=0;}}return initialBoard;});// 当前落子玩家，1为黑棋，2为白棋\nconst[currentPlayer,setCurrentPlayer]=useState(1);// 处理点击棋盘格子的事件函数\nconst handleClick=(rowIndex,cellIndex)=>{if(board[rowIndex][cellIndex]!==0){return;// 防止重复落子\n}const newBoard=[...board];newBoard[rowIndex][cellIndex]=currentPlayer;// 调用checkWin函数判断是否获胜\nif(checkWin(newBoard,rowIndex,cellIndex,currentPlayer)){const playerName=currentPlayer===1?'黑棋':'白棋';alert(\"\".concat(playerName,\"\\u83B7\\u80DC\\uFF01\"));}else{// 若未获胜，切换当前玩家\nsetCurrentPlayer(currentPlayer===1?2:1);}setBoard(newBoard);};// 重置游戏\nconst resetGame=()=>{const initialBoard=[];for(let i=0;i<BOARD_SIZE;i++){initialBoard[i]=[];for(let j=0;j<BOARD_SIZE;j++){initialBoard[i][j]=0;}}setBoard(initialBoard);setCurrentPlayer(1);};return/*#__PURE__*/_jsxs(\"div\",{children:[board.map((row,rowIndex)=>/*#__PURE__*/_jsx(\"div\",{style:{display:'flex'},children:row.map((cell,cellIndex)=>/*#__PURE__*/_jsx(\"div\",{style:{width:'30px',height:'30px',border:'1px solid black',display:'flex',alignItems:'center',justifyContent:'center',backgroundColor:(rowIndex+cellIndex)%2===0?'#f0d9b5':'#b58863'},className:cell===1?'black-piece':cell===2?'white-piece':'',onClick:()=>handleClick(rowIndex,cellIndex),children:cell===1?'●':cell===2?'○':''},cellIndex))},rowIndex)),/*#__PURE__*/_jsx(\"button\",{onClick:resetGame,children:\"\\u91CD\\u7F6E\\u6E38\\u620F\"})]});};export default Board;","map":{"version":3,"names":["React","useState","jsx","_jsx","jsxs","_jsxs","BOARD_SIZE","checkWin","board","rowIndex","cellIndex","player","count","j","i","k","Board","setBoard","initialBoard","currentPlayer","setCurrentPlayer","handleClick","newBoard","playerName","alert","concat","resetGame","children","map","row","style","display","cell","width","height","border","alignItems","justifyContent","backgroundColor","className","onClick"],"sources":["D:/web/8/src/components/Board.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './styles.css'; // 确保引入样式文件\r\n\r\n// 定义棋盘大小\r\nconst BOARD_SIZE = 15;\r\n\r\n// 判断胜负的函数\r\nconst checkWin = (board, rowIndex, cellIndex, player) => {\r\n  // 检查横向\r\n  let count = 0;\r\n  for (let j = cellIndex - 4; j <= cellIndex + 4; j++) {\r\n    if (j >= 0 && j < BOARD_SIZE && board[rowIndex][j] === player) {\r\n      count++;\r\n      if (count === 5) {\r\n        return true;\r\n      }\r\n    } else {\r\n      count = 0;\r\n    }\r\n  }\r\n  // 检查纵向\r\n  count = 0;\r\n  for (let i = rowIndex - 4; i <= rowIndex + 4; i++) {\r\n    if (i >= 0 && i < BOARD_SIZE && board[i][cellIndex] === player) {\r\n      count++;\r\n      if (count === 5) {\r\n        return true;\r\n      }\r\n    } else {\r\n      count = 0;\r\n    }\r\n  }\r\n  // 检查正斜向\r\n  count = 0;\r\n  for (let k = -4; k <= 4; k++) {\r\n    let i = rowIndex + k;\r\n    let j = cellIndex + k;\r\n    if (i >= 0 && i < BOARD_SIZE && j >= 0 && j < BOARD_SIZE && board[i][j] === player) {\r\n      count++;\r\n      if (count === 5) {\r\n        return true;\r\n      }\r\n    } else {\r\n      count = 0;\r\n    }\r\n  }\r\n  // 检查反斜向\r\n  count = 0;\r\n  for (let k = -4; k <= 4; k++) {\r\n    let i = rowIndex + k;\r\n    let j = cellIndex - k;\r\n    if (i >= 0 && i < BOARD_SIZE && j >= 0 && j < BOARD_SIZE && board[i][j] === player) {\r\n      count++;\r\n      if (count === 5) {\r\n        return true;\r\n      }\r\n    } else {\r\n      count = 0;\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\nconst Board = () => {\r\n  // 棋盘状态，使用二维数组表示，0表示无棋子，1表示黑棋，2表示白棋\r\n  const [board, setBoard] = useState(() => {\r\n    const initialBoard = [];\r\n    for (let i = 0; i < BOARD_SIZE; i++) {\r\n      initialBoard[i] = [];\r\n      for (let j = 0; j < BOARD_SIZE; j++) {\r\n        initialBoard[i][j] = 0;\r\n      }\r\n    }\r\n    return initialBoard;\r\n  });\r\n  // 当前落子玩家，1为黑棋，2为白棋\r\n  const [currentPlayer, setCurrentPlayer] = useState(1);\r\n\r\n  // 处理点击棋盘格子的事件函数\r\n  const handleClick = (rowIndex, cellIndex) => {\r\n    if (board[rowIndex][cellIndex] !== 0) {\r\n      return; // 防止重复落子\r\n    }\r\n    const newBoard = [...board];\r\n    newBoard[rowIndex][cellIndex] = currentPlayer;\r\n    // 调用checkWin函数判断是否获胜\r\n    if (checkWin(newBoard, rowIndex, cellIndex, currentPlayer)) {\r\n      const playerName = currentPlayer === 1 ? '黑棋' : '白棋';\r\n      alert(`${playerName}获胜！`);\r\n    } else {\r\n      // 若未获胜，切换当前玩家\r\n      setCurrentPlayer(currentPlayer === 1 ? 2 : 1);\r\n    }\r\n    setBoard(newBoard);\r\n  };\r\n\r\n  // 重置游戏\r\n  const resetGame = () => {\r\n    const initialBoard = [];\r\n    for (let i = 0; i < BOARD_SIZE; i++) {\r\n      initialBoard[i] = [];\r\n      for (let j = 0; j < BOARD_SIZE; j++) {\r\n        initialBoard[i][j] = 0;\r\n      }\r\n    }\r\n    setBoard(initialBoard);\r\n    setCurrentPlayer(1);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {board.map((row, rowIndex) => (\r\n        <div key={rowIndex} style={{ display: 'flex' }}>\r\n          {row.map((cell, cellIndex) => (\r\n            <div\r\n              key={cellIndex}\r\n              style={{\r\n                width: '30px',\r\n                height: '30px',\r\n                border: '1px solid black',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                backgroundColor: (rowIndex + cellIndex) % 2 === 0 ? '#f0d9b5' : '#b58863'\r\n              }}\r\n              className={cell === 1 ? 'black-piece' : cell === 2 ? 'white-piece' : ''}\r\n              onClick={() => handleClick(rowIndex, cellIndex)}\r\n            >\r\n              {cell === 1 ? '●' : cell === 2 ? '○' : ''}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      ))}\r\n      <button onClick={resetGame}>重置游戏</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}